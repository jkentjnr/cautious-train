name: documentation.flow

run-name: >-
  [${{ github.event.client_payload.job_key }}] Flow Documentation

on:
  repository_dispatch:
    types: [update-documentation-flow]
  workflow_dispatch:
    inputs:
      job_key:
        description: 'Job Key to process'
        required: true
        type: string
      modified_files:
        description: 'Modified Files (Comma-Separated List)'
        required: true
        type: string

jobs:
  update-documentation-flow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for diff

      - name: Output Parameters
        run: |
          echo "Updating documentation for flow: ${{ github.event.client_payload.job_key || inputs.job_key }}"
          echo "Modified files: ${{ github.event.client_payload.modified_files || inputs.modified_files }}"
          echo "PARAM_JOB_KEY=${{ github.event.client_payload.job_key || inputs.job_key }}" >> $GITHUB_ENV
          echo "PARAM_MODIFIED_FILES=${{ github.event.client_payload.modified_files || inputs.modified_files }}" >> $GITHUB_ENV

      - name: Set Authentication for Github Repositories for Terraform
        run: git config --global url."https://${{ secrets.PAT_TOKEN }}@github.com".insteadOf https://github.com

      - name: Get Documentation Repository Details
        run: |
          # Get repository
          REPO=$(jq -r '.docs.repository' documentation.json)

          # Get branch
          BRANCH=$(jq -r '.docs.branch' documentation.json)

          echo "PARAM_REPO=$REPO" >> $GITHUB_ENV
          echo "PARAM_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Clone Documentation Repository
        run: |
          git clone ${{ env.PARAM_REPO }} -b ${{ env.PARAM_BRANCH }} ./.tmp
          ls -la ./.tmp

      - name: Generate Prompt for Flow Documentation
        run: |

          echo "Generating prompt for flow documentation update..."

          previous_prompt=""
          current_prompt=""

          # Use process substitution instead of pipe to avoid subshell
          while read -r file; do
              echo "Processing file: $file"

              # Get the existing (current) file content
              if [ -f "$file" ]; then
                  echo "Getting current version of: $file"
                  current_content=$(cat "$file")
                  echo "Current file size: $(echo "$current_content" | wc -l) lines"
              else
                  echo "Warning: Current file $file not found"
                  current_content=""
              fi

              # Get the file content from the previous commit
              if git show HEAD~1:"$file" > /dev/null 2>&1; then
                  echo "Getting previous version of: $file"
                  previous_content=$(git show HEAD~1:"$file")
              else
                  echo "Warning: $file not found in previous commit (might be a new file)"
                  previous_content=""
              fi

              # Append to variables (these will now persist!)
              previous_prompt+="=== [START] FILE: $file VERSION: previous ==="$'\n'"$previous_content"$'\n'"=== [END] FILE ==="$'\n'$'\n'
              current_prompt+="=== [START] FILE: $file VERSION: current ==="$'\n'"$current_content"$'\n'"=== [END] FILE ==="$'\n'$'\n'

          done < <(jq -r --arg job_key "$PARAM_JOB_KEY" '.jobs[] | select(.key == $job_key) | .input[]' documentation.json)

          # Combine into final prompt
          PROMPT="${PROMPT//\{\!previous\}/$previous_prompt}"
          PROMPT="${PROMPT//\{\!current\}/$current_prompt}"

          # Get documentation path
          documentation=$(jq -r --arg key "$PARAM_JOB_KEY" '.jobs[] | select(.key == $key) | .documentation' documentation.json)
          documentation_content=$(cat "./.tmp/$documentation")
          documentation_prompt="=== [START] FILE: $documentation ==="$'\n'"$documentation_content"$'\n'"=== [END] FILE ==="$'\n'$'\n'
          PROMPT="${PROMPT//\{\!documentation\}/$documentation_prompt}"

          echo -e "\nFinal Prompt:\n----------------------\n$PROMPT\n----------------------\n"

          {
            echo "PROMPT<<EOF"
            echo "$PROMPT"
            echo "EOF"
          } >> $GITHUB_ENV

        env:
          PROMPT: ${{ vars.PROMPT_FLOW }}
          PARAM_JOB_KEY: ${{ env.PARAM_JOB_KEY }}

      - name: Generate Documentation with Claude
        run: |
          # Escape the prompt for JSON
          ESCAPED_PROMPT=$(printf '%s' "$PROMPT" | jq -Rs .)

          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d "$(jq -n --arg prompt "$PROMPT" '{
              "model": "claude-sonnet-4-20250514",
              "max_tokens": 1000,
              "messages": [
                {
                  "role": "user",
                  "content": $prompt
                }
              ]
            }')")
          echo "Response received from Claude."

          # Get documentation path
          documentation=$(jq -r --arg key "$PARAM_JOB_KEY" '.jobs[] | select(.key == $key) | .documentation' documentation.json)
          echo "Updating documentation file: $documentation"

          # Write file.
          echo "$RESPONSE" | jq -r '.content[0].text' > "./.tmp/$documentation"
          echo "Documentation updated successfully."

          echo "Generated Documentation Content:"
          cat "./.tmp/$documentation"

        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PROMPT: ${{ env.PROMPT }}
          PARAM_JOB_KEY: ${{ env.PARAM_JOB_KEY }}

      - name: Generate Pull Request in Documentation Repository
        run: |
          cd ./.tmp

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create a new branch
          BRANCH_NAME="update/flow-${{ env.PARAM_JOB_KEY }}-$(date +%s)"
          git checkout -b $BRANCH_NAME

          # Stage changes
          git add .

          # Commit changes
          COMMIT_MESSAGE="Update documentation for flow: ${{ env.PARAM_JOB_KEY }}"
          git commit -m "$COMMIT_MESSAGE"

          # Push branch
          git push origin $BRANCH_NAME

          # Create Pull Request using gh CLI
          gh auth login --with-token <<< ${{ secrets.PAT_TOKEN }}
          gh pr create --title "$COMMIT_MESSAGE" --body "This PR updates the documentation for the flow associated with job key: ${{ env.PARAM_JOB_KEY }}." --head $BRANCH_NAME --base ${{ env.PARAM_BRANCH }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          PARAM_JOB_KEY: ${{ env.PARAM_JOB_KEY }}
          PARAM_BRANCH: ${{ env.PARAM_BRANCH }}